# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'atom-text-editor':
  'ctrl-k': 'unset!'

'atom-text-editor.vim-mode:not(.insert-mode)':
  'shift-j': 'unset!'
  'shift-k': 'unset!'
  'shift-j': 'pane:show-previous-item'
  'shift-k': 'pane:show-next-item'
  'space b': 'fuzzy-finder:toggle-buffer-finder'
  'space a': 'ruby-test:test-all'
  'space t': 'ruby-test:test-file'
  'space l': 'ruby-test:test-previous'
  'space x': 'ruby-test:toggle'

'atom-text-editor.vim-mode.normal-mode':
  'ctrl-]': 'atom-ctags:go-to-declaration'
  'ctrl-[': 'atom-ctags:return-from-declaration'

'body':
  'ctrl-h': 'window:focus-pane-on-left'
  'ctrl-l': 'window:focus-pane-on-right'
  'ctrl-k': 'core:move-up'
  'ctrl-j': 'core:move-down'

'.fuzzy-finder, .command-palette':
  'ctrl-k': 'core:move-up'
  'ctrl-j': 'core:move-down'
  'ctrl-v': 'pane:split-right'

'body atom-text-editor.autocomplete-active':
  'ctrl-j': 'autocomplete-plus:move-down'
  'ctrl-k': 'autocomplete-plus:move-up'

'.advanced-open-file atom-text-editor':
  'ctrl-k': 'advanced-open-file:move-cursor-up'
  'ctrl-j': 'advanced-open-file:move-cursor-down'
  'ctrl-v': 'pane:split-right'
